---

- name: 'Start playbook notification'
  debug: msg="Started cuda.yml for {{ cuda_os_distribution }}"
  tags:
    - notify

- name: 'Register presence of cuda installer'
  stat:
    path: /tmp/cuda_linux.run
  register: cuda
  tags: 
  - cuda
  - run

- name: 'Get CUDA installer'
  get_url: 
    url: "https://developer.nvidia.com/compute/cuda/{{ cuda_major_version }}.0/Prod2/local_installers/cuda_{{ cuda_major_version }}.{{ cuda_package_version }}_linux-run"
    dest: /tmp/cuda_linux.run
    mode: a+x
  become: true
  tags:
  - installer
  - cuda

- name: 'Install tools for build'
  apt: 
    name: "{{ item }}"
  become: true
  with_items:
    - gcc 
    - make 
    - g++
  tags:
    - cuda
    - tools

- name: 'Install build essentials and dkms for builds'
  apt: 
    name: "{{ item }}"
  become: true
  with_items: 
    - build-essential
    - dkms
  tags:
    - cuda
    - essentials

- name: 'Install linux-headers'
  action: shell apt install -y linux-headers-$(uname -r)
  become: true
  ignore_errors: True
  tags:
    - cuda
    - linux-headers

- name: 'Stop lightdm'
  service: 
    name: lightdm
    enabled: no
    state: stopped
  become: true
  tags:
  - lightdm
  - cuda

- name: 'Run cuda_linux.run installer, by using silent you accept the license'
  command: "/tmp/cuda_linux.run --silent --samples --toolkit"
  become: true
  tags:
    - run
    - cuda
  when: cuda.stat.exists == False

- name: 'Correct the PATH'
  lineinfile:
    path: /etc/profile.d/nvidia.sh
    regexp: '^PATH='
    line: 'PATH=/usr/local/cuda-8.0/bin:$PATH'
  tags: 
    - cuda
    - path

- name: 'Correct the LD_LIBRARY_PATH'
  lineinfile:
    path: /etc/profile.d/nvidia.sh
    regexp: '^LD_LIBRARY_PATH='
    line: 'LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH'
  become: true
  tags: 
    - cuda
    - environment

- name: "add extra_path to path"
  lineinfile: >
    dest=/etc/environment
    state=present
    backrefs=yes
    regexp='PATH=(["]*)((?!.*?{{extra_path}}).*?)(["]*)$'
    line="PATH=\1\2:{{extra_path}}\3"
  become: true
  tags: 
    - cuda
    - environment

- name: 'Restart server, without the sleep the connection closes to fast.'
  command: sleep 2 && /sbin/reboot
  async: 0
  poll: 0
  ignore_errors: true
  tags:
    - reboot
    - drivers
  become: true
  when: nvidia.stat.exists == False
  tags:
    - reboot

- name: 'Wait for VM to come back'
  wait_for: >
    host="{{ inventory_hostname }}"
    state=started
    port=22
    delay=15
    timeout=60
  delegate_to: localhost
  tags:
    - reboot
